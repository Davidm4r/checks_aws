import random
import boto3
from abc import ABC, abstractmethod

available_services = [
    'accessanalyzer',
    'account',
    'acm',
    'acm-pca',
    'alexaforbusiness',
    'amp',
    'amplify',
    'amplifybackend',
    'amplifyuibuilder',
    'apigateway',
    'apigatewaymanagementapi',
    'apigatewayv2',
    'appconfig',
    'appconfigdata',
    'appflow',
    'appintegrations',
    'application-autoscaling',
    'application-insights',
    'applicationcostprofiler',
    'appmesh',
    'apprunner',
    'appstream',
    'appsync',
    'athena',
    'auditmanager',
    'autoscaling',
    'autoscaling-plans',
    'backup',
    'backup-gateway',
    'batch',
    'billingconductor',
    'braket',
    'budgets',
    'ce',
    'chime',
    'chime-sdk-identity',
    'chime-sdk-media-pipelines',
    'chime-sdk-meetings',
    'chime-sdk-messaging',
    'cloud9',
    'cloudcontrol',
    'clouddirectory',
    'cloudformation',
    'cloudfront',
    'cloudhsm',
    'cloudhsmv2',
    'cloudsearch',
    'cloudsearchdomain',
    'cloudtrail',
    'cloudwatch',
    'codeartifact',
    'codebuild',
    'codecommit',
    'codedeploy',
    'codeguru-reviewer',
    'codeguruprofiler',
    'codepipeline',
    'codestar',
    'codestar-connections',
    'codestar-notifications',
    'cognito-identity',
    'cognito-idp',
    'cognito-sync',
    'comprehend',
    'comprehendmedical',
    'compute-optimizer',
    'config',
    'connect',
    'connect-contact-lens',
    'connectparticipant',
    'cur',
    'customer-profiles',
    'databrew',
    'dataexchange',
    'datapipeline',
    'datasync',
    'dax',
    'detective',
    'devicefarm',
    'devops-guru',
    'directconnect',
    'discovery',
    'dlm',
    'dms',
    'docdb',
    'drs',
    'ds',
    'dynamodb',
    'dynamodbstreams',
    'ebs',
    'ec2',
    'ec2-instance-connect',
    'ecr',
    'ecr-public',
    'ecs',
    'efs',
    'eks',
    'elastic-inference',
    'elasticache',
    'elasticbeanstalk',
    'elastictranscoder',
    'elb',
    'elbv2',
    'emr',
    'emr-containers',
    'emr-serverless',
    'es',
    'events',
    'evidently',
    'finspace',
    'finspace-data',
    'firehose',
    'fis',
    'fms',
    'forecast',
    'forecastquery',
    'frauddetector',
    'fsx',
    'gamelift',
    'gamesparks',
    'glacier',
    'globalaccelerator',
    'glue',
    'grafana',
    'greengrass',
    'greengrassv2',
    'groundstation',
    'guardduty',
    'health',
    'healthlake',
    'honeycode',
    'iam',
    'identitystore',
    'imagebuilder',
    'importexport',
    'inspector',
    'inspector2',
    'iot',
    'iot-data',
    'iot-jobs-data',
    'iot1click-devices',
    'iot1click-projects',
    'iotanalytics',
    'iotdeviceadvisor',
    'iotevents',
    'iotevents-data',
    'iotfleethub',
    'iotsecuretunneling',
    'iotsitewise',
    'iotthingsgraph',
    'iottwinmaker',
    'iotwireless',
    'ivs',
    'ivschat',
    'kafka',
    'kafkaconnect',
    'kendra',
    'keyspaces',
    'kinesis',
    'kinesis-video-archived-media',
    'kinesis-video-media',
    'kinesis-video-signaling',
    'kinesisanalytics',
    'kinesisanalyticsv2',
    'kinesisvideo',
    'kms',
    'lakeformation',
    'lambda',
    'lex-models',
    'lex-runtime',
    'lexv2-models',
    'lexv2-runtime',
    'license-manager',
    'lightsail',
    'location',
    'logs',
    'lookoutequipment',
    'lookoutmetrics',
    'lookoutvision',
    'machinelearning',
    'macie',
    'macie2',
    'managedblockchain',
    'marketplace-catalog',
    'marketplace-entitlement',
    'marketplacecommerceanalytics',
    'mediaconnect',
    'mediaconvert',
    'medialive',
    'mediapackage',
    'mediapackage-vod',
    'mediastore',
    'mediastore-data',
    'mediatailor',
    'memorydb',
    'meteringmarketplace',
    'mgh',
    'mgn',
    'migration-hub-refactor-spaces',
    'migrationhub-config',
    'migrationhubstrategy',
    'mobile',
    'mq',
    'mturk',
    'mwaa',
    'neptune',
    'network-firewall',
    'networkmanager',
    'nimble',
    'opensearch',
    'opsworks',
    'opsworkscm',
    'organizations',
    'outposts',
    'panorama',
    'personalize',
    'personalize-events',
    'personalize-runtime',
    'pi',
    'pinpoint',
    'pinpoint-email',
    'pinpoint-sms-voice',
    'pinpoint-sms-voice-v2',
    'polly',
    'pricing',
    'proton',
    'qldb',
    'qldb-session',
    'quicksight',
    'ram',
    'rbin',
    'rds',
    'rds-data',
    'redshift',
    'redshift-data',
    'rekognition',
    'resiliencehub',
    'resource-groups',
    'resourcegroupstaggingapi',
    'robomaker',
    'route53',
    'route53-recovery-cluster',
    'route53-recovery-control-config',
    'route53-recovery-readiness',
    'route53domains',
    'route53resolver',
    'rum',
    's3',
    's3control',
    's3outposts',
    'sagemaker',
    'sagemaker-a2i-runtime',
    'sagemaker-edge',
    'sagemaker-featurestore-runtime',
    'sagemaker-runtime',
    'savingsplans',
    'schemas',
    'sdb',
    'secretsmanager',
    'securityhub',
    'serverlessrepo',
    'service-quotas',
    'servicecatalog',
    'servicecatalog-appregistry',
    'servicediscovery',
    'ses',
    'sesv2',
    'shield',
    'signer',
    'sms',
    'sms-voice',
    'snow-device-management',
    'snowball',
    'sns',
    'sqs',
    'ssm',
    'ssm-contacts',
    'ssm-incidents',
    'sso',
    'sso-admin',
    'sso-oidc',
    'stepfunctions',
    'storagegateway',
    'sts',
    'support',
    'swf',
    'synthetics',
    'textract',
    'timestream-query',
    'timestream-write',
    'transcribe',
    'transfer',
    'translate',
    'voice-id',
    'waf',
    'waf-regional',
    'wafv2',
    'wellarchitected',
    'wisdom',
    'workdocs',
    'worklink',
    'workmail',
    'workmailmessageflow',
    'workspaces',
    'workspaces-web',
    'xray',
    ]


class Client:
    def __init__(self, services, region=None):
        for service in services:
            if service in available_services:
                # TODO use setattr(self, service, x)
                if region:
                    self.__dict__[service] = boto3.client(service, region_name=region)
                else:
                    self.__dict__[service] = boto3.client(service)


class Service(ABC):

    @property
    @abstractmethod
    def available_methods(self):
        return "CheckXX"

    @property
    @abstractmethod
    def available_services(self):
        return "Description"


class Check(ABC):
    def __init__(self, client):
        self.client = client

    @property
    @abstractmethod
    def title(self):
        return "CheckXX"

    @property
    @abstractmethod
    def description(self):
        return "Description"

    @abstractmethod
    def execute(self):
        pass

